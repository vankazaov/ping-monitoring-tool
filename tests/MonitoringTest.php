<?php

declare(strict_types=1);

use PHPUnit\Framework\TestCase;
use PingMonitoringTool\Domain;
use PingMonitoringTool\ErrorHandler;
use PingMonitoringTool\HttpClient;
use PingMonitoringTool\Logger;
use PingMonitoringTool\Monitoring;
use PingMonitoringTool\Repository;
use PingMonitoringTool\Status;

class MonitoringTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $root_dir = realpath(__DIR__.'/');
        if (!defined('ROOT')) define('ROOT', $root_dir);
    }

    public function testSuccess(): void
    {

        $client = $this->createMock(HttpClient::class);
        $client->method('get')->willReturn([
            'datetime' => new \DateTimeImmutable('2022-05-26 15:00:00'),
            'domain' => 'yandex.ru',
            'code' => 200,
            'code_definition' => 'OK',
            'time' => 0.25,
            'size' => 125,
        ]);
        $repository = new Repository();
        $logger = new Logger('prod', 1, $repository);
        $error_handler = new ErrorHandler($logger);

        $monitor = new Monitoring($error_handler, $client);

        $status = $monitor->ping(new Domain("yandex.ru"));
        self::assertNotNull($status);
        self::assertEquals('yandex.ru', $status->getDomain());
        self::assertEquals('2022-05-26 15:00:00', $status->getDatetime()->format('Y-m-d H:i:s'));
        self::assertEquals(200, $status->getCode());
        self::assertEquals('OK', $status->getStatus());
        self::assertEquals(0.25, $status->getTime());
        self::assertEquals(125, $status->getSize());
    }

    public function testNotFound(): void
    {
        $client = $this->createMock(HttpClient::class);
        $client->method('get')->willReturn([
            'datetime' => new \DateTimeImmutable('2022-05-26 15:00:00'),
            'domain' => 'yandex.ru',
            'code' => 0,
            'code_definition' => 'DOWN',
            'time' => 0,
            'size' => 0,
        ]);
        $repository = new Repository();
        $logger = new Logger('prod', 1, $repository);
        $error_handler = new ErrorHandler($logger);
        $monitor = new Monitoring($error_handler, $client);
        $status = $monitor->ping(new Domain("localhost.com"));
        self::assertNull($status);
    }

    public function testIsOkNull():void
    {
        $client = $this->createMock(HttpClient::class);
        $client->method('get')->willReturn([
            'datetime' => new \DateTimeImmutable('2022-05-26 15:00:00'),
            'domain' => 'yandex.ru',
            'code' => 0,
            'code_definition' => 'DOWN',
            'time' => 0,
            'size' => 0,
        ]);
        $repository = new Repository();
        $logger = new Logger('prod', 1, $repository);
        $error_handler = new ErrorHandler($logger);
        $monitor = new Monitoring($error_handler, $client);
        $result = $monitor->isOK(null);
        self::assertFalse($result);
    }

    public function testIsOk200():void
    {
        $client = $this->createMock(HttpClient::class);
        $client->method('get')->willReturn([
            'datetime' => new \DateTimeImmutable('2022-05-26 15:00:00'),
            'domain' => 'yandex.ru',
            'code' => 200,
            'code_definition' => 'OK',
            'time' => 0,
            'size' => 0,
        ]);
        $repository = new Repository();
        $logger = new Logger('prod', 1, $repository);
        $error_handler = new ErrorHandler($logger);
        $monitor = new Monitoring($error_handler, $client);
        $status = $monitor->ping(new Domain("yandex.ru"));
        $result = $monitor->isOK($status);
        self::assertTrue($result);
    }
    public function testIsOk300():void
    {
        $client = $this->createMock(HttpClient::class);
        $client->method('get')->willReturn([
            'datetime' => new \DateTimeImmutable('2022-05-26 15:00:00'),
            'domain' => 'yandex.ru',
            'code' => 301,
            'code_definition' => 'Moved Permanently',
            'time' => 0,
            'size' => 0,
        ]);
        $repository = new Repository();
        $logger = new Logger('prod', 1, $repository);
        $error_handler = new ErrorHandler($logger);
        $monitor = new Monitoring($error_handler, $client);
        $status = $monitor->ping(new Domain("yandex.ru"));
        $result = $monitor->isOK($status);
        self::assertFalse($result);
    }
}